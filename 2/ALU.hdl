// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Preprocess x
    Mux16(a= x, b= false, sel= zx, out= zorx); //if zx==1 -> zero x, else keep x
    Not16(in= zorx, out= notzorx); 
    Mux16(a= zorx, b=notzorx , sel= nx, out= x1); //if nx==1 -> Notx, else keep x (x1 = x after preprocessing)

    // Preprocess y
    Mux16(a= y, b= false, sel= zy, out= zory);
    Not16(in= zory, out= notzory);
    Mux16(a= zory, b= notzory, sel= ny, out= y1);

    // Function Add or And
    Add16(a = x1, b = y1, out = xAddy);
    And16(a= x1, b= y1, out= xAndy);
    Mux16(a= xAndy, b= xAddy, sel= f, out= funcOut);

    // Post process out
    Not16(in= funcOut, out= notFuncOut);
    Mux16(a= funcOut, b= notFuncOut, sel= no, out= out,out[15]= out15,out[0..7]= out0to7, out[8..15]= out8to15);

    // Zero flag
    Or8Way(in= out0to7,out= low);
    Or8Way(in= out8to15, out= hi);
    Or(a= low, b= hi, out= anyone); // anyOne = 1 if any output bit is 1
    Not(in= anyone, out= zr); // zr = NOT(anyOne) -> 1 when result == 0
    
    // Negative flag: ng | connect ng to out[15] [since the MSB is a sign bit in 2's Complement]
    Or(a=out15,b=false, out=ng); // ng = out[15]
}